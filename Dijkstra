#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

const int INF = INT_MAX;

void dijkstra(const vector<vector<pair<int, int>>>& grafo, int origen) {
    int n = grafo.size();
    vector<int> dist(n, INF);
    dist[origen] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
    pq.push({0, origen});

    while (!pq.empty()) {
        int u = pq.top().second;
        int d = pq.top().first;
        pq.pop();

        if (d > dist[u]) continue;

        for (const auto& [v, peso] : grafo[u]) {
            if (dist[u] + peso < dist[v]) {
                dist[v] = dist[u] + peso;
                pq.push({dist[v], v});
            }
        }
    }

    cout << "Distancias mínimas desde el nodo " << origen << ":\n";
    for (int i = 0; i < n; ++i) {
        cout << "Nodo " << i << ": ";
        if (dist[i] == INF)
            cout << "Inalcanzable";
        else
            cout << dist[i];
        cout << endl;
    }
}

int main() {
    int n = 5; // Número de nodos
    vector<vector<pair<int, int>>> grafo(n);

    // Grafo dirigido con pesos: grafo[u].push_back({v, peso});
    grafo[0].push_back({1, 10});
    grafo[0].push_back({4, 5});
    grafo[1].push_back({2, 1});
    grafo[2].push_back({3, 4});
    grafo[3].push_back({0, 7});
    grafo[4].push_back({1, 3});
    grafo[4].push_back({2, 9});
    grafo[4].push_back({3, 2});

    dijkstra(grafo, 0);

    return 0;
}
